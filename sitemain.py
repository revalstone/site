import os
import requests
import time
from flask import Flask, request, jsonify, redirect
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –¥–ª—è Backblaze B2
B2_ACCOUNT_ID = os.getenv('B2_ACCOUNT_ID')
BUCKET_ID = os.getenv('BUCKET_ID')  
B2_APPLICATION_KEY_ID = os.getenv('B2_APPLICATION_KEY_ID')
B2_APPLICATION_KEY = os.getenv('B2_APPLICATION_KEY')
B2_BUCKET_NAME = os.getenv('B2_BUCKET_NAME')

B2_AUTH_URL = "https://api.backblazeb2.com/b2api/v2/b2_authorize_account"

# –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_cache = {
    "token": None,
    "api_url": None,
    "download_url": None,
    "expires_at": 0  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
}
# –ö—ç—à —Ñ–∞–π–ª–∞ —ç–ø–∏–∑–æ–¥–æ–≤
episodes_list_cache = {
    "url": None,
    "expires_at": 0  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞
}
CACHE_LIFETIME = 60 * 60 * 24  # 24 —á–∞—Å–∞
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 500 MB

def authorize_b2():
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Backblaze B2 –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω"""
    global auth_cache
    if time.time() < auth_cache["expires_at"]:
        return auth_cache["token"], auth_cache["api_url"], auth_cache["download_url"]
    
    try:
        response = requests.get(B2_AUTH_URL, auth=(B2_APPLICATION_KEY_ID, B2_APPLICATION_KEY))
        response.raise_for_status()
        data = response.json()
        auth_cache["token"] = data['authorizationToken']
        auth_cache["api_url"] = data['apiUrl']
        auth_cache["download_url"] = data['downloadUrl']
        auth_cache["expires_at"] = time.time() + CACHE_LIFETIME
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2")
        return auth_cache["token"], auth_cache["api_url"], auth_cache["download_url"]
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ B2: {e}")
        if response is not None:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return None, None, None

def get_file_signed_url(file_path, valid_duration=86400):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª"""
    token, api_url, download_url = authorize_b2()
    if not token:
        return None
    
    try:
        headers = {"Authorization": token}
        data = {
            "bucketId": BUCKET_ID,
            "fileNamePrefix": file_path,
            "validDurationInSeconds": valid_duration
        }
        print("üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ B2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:", data)

        response = requests.post(
            f"{api_url}/b2api/v2/b2_get_download_authorization",  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
            headers=headers, json=data
        )
        response.raise_for_status()
        auth_data = response.json()
        auth_token = auth_data["authorizationToken"]

        signed_url = f"{download_url}/file/{B2_BUCKET_NAME}/{file_path}?Authorization={auth_token}"
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {signed_url}")
        return signed_url
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: {e}")
        if response is not None:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return None

@app.route('/download_episodes_list', methods=['GET'])
def download_episodes_list():
    global episodes_list_cache
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à
    if episodes_list_cache["url"] and current_time < episodes_list_cache["expires_at"]:
        print("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è episodes_list.rpy")
        return redirect(episodes_list_cache["url"])

    file_name = "episodes_list.rpyc"
    file_path = f"episode_files/{file_name}"
    
    signed_url = get_file_signed_url(file_path, valid_duration=86400)  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞
    if not signed_url:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"}), 500

    # –ö—ç—à–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    episodes_list_cache["url"] = signed_url
    episodes_list_cache["expires_at"] = current_time + 86400  # –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞

    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è episodes_list.rpy (–Ω–∞ 24 —á–∞—Å–∞)")
    return redirect(signed_url)


@app.route('/download_archive', methods=['GET'])
def download_archive():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"""
    season = request.args.get('season_number')
    episode = request.args.get('episode_number')
    
    if not season or not episode:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã season_number –∏–ª–∏ episode_number"}), 400
    
    archive_name = f"e{episode}s{season}.zip"
    file_path = f"episode_files/{season}/{episode}/{archive_name}"
    
    print(f"üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: season={season}, episode={episode}, file_path={file_path}")
    
    signed_url = get_file_signed_url(file_path)
    if not signed_url:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"}), 500
    
    return redirect(signed_url)

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)
